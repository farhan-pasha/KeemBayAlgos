-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x----------PROBLEM-------x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x

Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

Example:

X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X
Explanation:

Surrounded regions shouldnâ€™t be on the border, 
which means that any 'O' on the border of the board are not flipped to 'X'. 
Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. 
Two cells are connected if they are adjacent cells connected horizontally or vertically.


Link: https://leetcode.com/problems/surrounded-regions/

-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x----------LOGIC/PSUEDO-CODE/Scratchpad-------x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x

The logic here is look this problem as a flood-fill situation. Corner 'O' is like an entry point for water. 'X' is land.
Every 'O' connected to edge 'O's should be untouched. After flood, the lakes formed will get DRY!
This is why you will flip the 'O' to 'X' where 'O's are surrounded by 'X's.

Based on the above info, we can check 'O's at edges and apply dfs to get all the connected 'O's.
We need to mark them visited, we can edit their values from 'O's to someother value - for eg 'n'.
Here for our understanding, lets assume 'n' stands for 'not change'. Other 'O's (Lakes) we need to change it to 'X'.

Note: As the number of rows and columns can be different, we need 2 for loops for getting all the edges.

Later we need to flip all the 'n's to 'O's and 'O's (Lakes) to X.
We need to take care what to do first^, if we do 'n's to 'O's first then it can create problem for 'O's (Lakes) to X 
(As every ocurrence of 'O') will be taken as lakes. Hence when flipping, flip the lakes to X first then do 'n's to 'O's 

//Time Complexity: O(m*max number of connected '0'(which can be n*m - dfs)...if m > n else n*max number of connected '0'(which can be n*m-dfs))
//Space Complexity:O(1)

